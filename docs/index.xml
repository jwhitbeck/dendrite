<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dendrite</title>
    <link>http://dendrite.tech/</link>
    <description>Recent content on Dendrite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>John Whitbeck 2015-2017</copyright>
    <lastBuildDate>Sun, 23 Aug 2015 19:31:12 -0700</lastBuildDate>
    
	<atom:link href="http://dendrite.tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial</title>
      <link>http://dendrite.tech/tutorial/</link>
      <pubDate>Sun, 23 Aug 2015 19:31:12 -0700</pubDate>
      
      <guid>http://dendrite.tech/tutorial/</guid>
      <description>Tutorial Let&amp;rsquo;s get started with dendrite. This tutorial will take you through the basics of file I/O, show you how take advantage of the columnar format for your queries, and how to efficiently apply transformations on reads.
The examples below assume that you have started a REPL in a project that imports dendrite as
[dendrite &amp;#34;0.5.13&amp;#34;] and required the dendrite.core namespace as
(require &amp;#39;[dendrite.core :as d]) Read and write files Writing to dendrite files should feel very similar to writing other types of files in clojure.</description>
    </item>
    
    <item>
      <title>Benchmarks</title>
      <link>http://dendrite.tech/benchmarks/</link>
      <pubDate>Sun, 23 Aug 2015 17:56:28 -0700</pubDate>
      
      <guid>http://dendrite.tech/benchmarks/</guid>
      <description>Benchmarks Overview Performance is one of the main design goals of dendrite. From the very beginning, benchmarks have been a core part of its development workflow. The results below highlight how dendrite&amp;rsquo;s key performance metrics such as file read time or file size change with the characteristics of the underlying data (e.g. number of distinct values per column) and which subset of columns is queried.
Furthermore, solid performance shouldn&amp;rsquo;t be limited to scenarios that play to a columnar format&amp;rsquo;s strengths.</description>
    </item>
    
    <item>
      <title>File format</title>
      <link>http://dendrite.tech/format/</link>
      <pubDate>Sun, 23 Aug 2015 19:30:50 -0700</pubDate>
      
      <guid>http://dendrite.tech/format/</guid>
      <description> File format Overview Dendrite&amp;rsquo;s file format is very similar to Parquet&amp;rsquo;s file format.
  TODO: add glossary and description. Discuss units of parallelization.
Primitives Varints  length variants zigzag (signed)  Strings UTF-8 byte arrays. VarSint + bytes
Encodings Metadata Record-group Column-chunk Schema Column Collection Record Field
Custom Types Custom metadata Record Group Column Chunk Dictionary vs regular columns
Page Data Dictionary </description>
    </item>
    
    <item>
      <title>Record shredding</title>
      <link>http://dendrite.tech/shredding/</link>
      <pubDate>Sun, 18 Oct 2015 19:10:45 -0700</pubDate>
      
      <guid>http://dendrite.tech/shredding/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Implementation notes</title>
      <link>http://dendrite.tech/implementation/</link>
      <pubDate>Sun, 23 Aug 2015 19:32:18 -0700</pubDate>
      
      <guid>http://dendrite.tech/implementation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introducing Dendrite</title>
      <link>http://dendrite.tech/</link>
      <pubDate>Sun, 23 Aug 2015 17:56:28 -0700</pubDate>
      
      <guid>http://dendrite.tech/</guid>
      <description>Website under construction. The following sections have content:
 Tutorial API docs Benchmarks File format  </description>
    </item>
    
  </channel>
</rss>